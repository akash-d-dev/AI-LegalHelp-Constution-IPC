"""LangChain tools for the Legal AI agent."""

from __future__ import annotations

import logging
from typing import List, Optional
from langchain_core.tools import tool
from langchain_openai import ChatOpenAI
from agent_system.utils.Constants import Constants
from agent_system.utils.vector_db import MilvusVectorDB

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Global variables for lazy initialization
_constitution_db: Optional[object] = None
_ipc_db: Optional[object] = None
_llm: Optional[ChatOpenAI] = None

########################################################
#Helper functions
########################################################
def get_constitution_db():
    """Lazy initialization of constitution database."""
    global _constitution_db
    if _constitution_db is None:
        logger.info("🔄 Initializing Constitution database...")
        try:
            _constitution_db = MilvusVectorDB(
                uri=Constants.MILVUS_URI_DB_COI,
                token=Constants.MILVUS_TOKEN_DB_COI,
                collection_names=[f"{Constants.MILVUS_COLLECTION_NAME_CONSTITUTION}_{i}" for i in range(1, Constants.MILVUS_COLLECTION_COUNT_CONSTITUTION + 1)],
            )
            logger.info("✅ Constitution database initialized successfully")
        except Exception as e:
            logger.error(f"❌ Could not initialize constitution database: {e}")
            _constitution_db = None
    return _constitution_db


def get_ipc_db():
    """Lazy initialization of IPC database."""
    global _ipc_db
    if _ipc_db is None:
        logger.info("🔄 Initializing IPC database...")
        try:
            _ipc_db = MilvusVectorDB(
                uri=Constants.MILVUS_URI_DB_IPC,
                token=Constants.MILVUS_TOKEN_DB_IPC,
                collection_names=[f"{Constants.MILVUS_COLLECTION_NAME_IPC}_{i}" for i in range(1, Constants.MILVUS_COLLECTION_COUNT_IPC + 1)],
            )
            logger.info("✅ IPC database initialized successfully")
        except Exception as e:
            logger.error(f"❌ Could not initialize IPC database: {e}")
            _ipc_db = None
    return _ipc_db


def get_llm():
    """Lazy initialization of LLM."""
    global _llm
    if _llm is None:
        logger.info("🔄 Initializing LLM...")
        _llm = ChatOpenAI(temperature=0, api_key=Constants.OPENAI_API_KEY)
        logger.info("✅ LLM initialized successfully")
    return _llm


########################################################
#Tools
########################################################
@tool
def generate_keywords(query: str) -> str:
    """Generate semantic keywords for a legal query to improve search results."""
    logger.info(f"🔑 TOOL: generate_keywords called with query: '{query}'")
    
    prompt = f"""Extract important legal keywords from this query for better search results from a vector database of Indian Constitution and Indian Penal Code.
    Return only the keywords separated by commas, or a best possible sentence that can be used to search the vector database. No explanations.
    
    Query: {query}
    
    Keywords:"""
    
    try:
        logger.info("🔄 Calling LLM to generate keywords...")
        llm = get_llm()
        response = llm.invoke(prompt)
        keywords = response.content.strip()
        logger.info(f"✅ Generated keywords: {keywords}")
        return keywords
    except Exception as e:
        error_msg = f"Error generating keywords: {str(e)}"
        logger.error(f"❌ {error_msg}")
        return error_msg


@tool
def search_constitution(query: str) -> str:
    """Search the Indian Constitution database using enhanced multi-strategy search for most relevant articles, clauses, and amendments. 
    
    IMPORTANT: This tool should ONLY be used AFTER calling generate_keywords first. Use the keywords generated by generate_keywords as the query parameter for better search results. Uses multiple distance metrics and search parameters for improved diversity and accuracy."""
    logger.info(f"📜 TOOL: search_constitution called with query: '{query}'")
    
    constitution_db = get_constitution_db()
    
    if constitution_db is None:
        error_msg = "Constitution database is not available. Please check your database configuration."
        logger.warning(f"⚠️ {error_msg}")
        return error_msg
    
    try:
        logger.info("🔍 Performing enhanced multi-strategy search on Constitution database...")
        results = constitution_db.combined_search_enhanced(query, top_k=3)
        
        if not results:
            logger.info("📭 No relevant constitutional provisions found")
            return "No relevant constitutional provisions found for this query."
        
        logger.info(f"📊 Found {len(results)} enhanced search results from Constitution database")
        
        formatted_results = []
        for i, result in enumerate(results):
            entity = result.get('entity', {})
            content = entity.get('text') or entity.get('content', 'No content available')
            distance = result.get('distance', 'Unknown')
            search_type = result.get('search_type', 'Unknown')
            collection = result.get('collection', 'Unknown')
            article = entity.get('article', 'Unknown Article')
            
            formatted_results.append(
                f"Result {i+1} (Distance: {distance:.4f}, Strategy: {search_type}):\n"
                f"Collection: {collection}\n"
                f"Article: {article}\n"
                f"Content: {content}\n"
            )
            logger.debug(f"📄 Result {i+1}: Article {article}, Distance: {distance:.4f}, Strategy: {search_type}")
        
        result_text = "\n".join(formatted_results)
        logger.info(f"✅ Constitution enhanced search completed, returning {len(formatted_results)} results")
        return result_text
        
    except Exception as e:
        error_msg = f"Error searching constitution database: {str(e)}"
        logger.error(f"❌ {error_msg}")
        return error_msg


@tool
def search_ipc(query: str) -> str:
    """Search the Indian Penal Code database using enhanced multi-strategy search for most relevant sections and offenses. 
    
    IMPORTANT: This tool should ONLY be used AFTER calling generate_keywords first. Use the keywords generated by generate_keywords as the query parameter for better search results. Uses multiple distance metrics and search parameters for improved diversity and accuracy."""
    logger.info(f"⚖️ TOOL: search_ipc called with query: '{query}'")
    
    ipc_db = get_ipc_db()
    
    if ipc_db is None:
        error_msg = "IPC database is not available. Please check your database configuration."
        logger.warning(f"⚠️ {error_msg}")
        return error_msg
    
    try:
        logger.info("🔍 Performing enhanced multi-strategy search on IPC database...")
        results = ipc_db.combined_search_enhanced(query, top_k=3)
        
        if not results:
            logger.info("📭 No relevant IPC sections found")
            return "No relevant IPC sections found for this query."
        
        logger.info(f"📊 Found {len(results)} enhanced search results from IPC database")
        
        formatted_results = []
        for i, result in enumerate(results):
            entity = result.get('entity', {})
            content = entity.get('text') or entity.get('content', 'No content available')
            distance = result.get('distance', 'Unknown')
            search_type = result.get('search_type', 'Unknown')
            collection = result.get('collection', 'Unknown')
            section = entity.get('section', 'Unknown Section')
            
            formatted_results.append(
                f"Result {i+1} (Distance: {distance:.4f}, Strategy: {search_type}):\n"
                f"Collection: {collection}\n"
                f"Section: {section}\n"
                f"Content: {content}\n"
            )
            logger.debug(f"📄 Result {i+1}: Section {section}, Distance: {distance:.4f}, Strategy: {search_type}")
        
        result_text = "\n".join(formatted_results)
        logger.info(f"✅ IPC enhanced search completed, returning {len(formatted_results)} results")
        return result_text
        
    except Exception as e:
        error_msg = f"Error searching IPC database: {str(e)}"
        logger.error(f"❌ {error_msg}")
        return error_msg


@tool
def predict_punishment(case_description: str) -> str:
    """Predict likely punishment and relevant IPC sections based on case description."""
    logger.info(f"🔮 TOOL: predict_punishment called with case: '{case_description[:100]}...'")
    
    prompt = f"""Based on the following case description, predict the likely punishment and relevant IPC sections under Indian law.
    
    Case Description: {case_description}
    
    Please provide:
    1. Likely punishment (imprisonment duration, fine amount, etc.)
    2. Relevant IPC sections
    3. Brief reasoning
    
    Keep the response concise and factual."""
    
    try:
        logger.info("🔄 Calling LLM to predict punishment...")
        llm = get_llm()
        response = llm.invoke(prompt)
        prediction = response.content
        logger.info(f"✅ Punishment prediction completed (length: {len(prediction)} chars)")
        return prediction
    except Exception as e:
        error_msg = f"Error predicting punishment: {str(e)}"
        logger.error(f"❌ {error_msg}")
        return error_msg


# List of all tools for easy import
tools = [generate_keywords, search_constitution, search_ipc, predict_punishment]
logger.info(f"🛠️ Tools module loaded with {len(tools)} tools: {[tool.name for tool in tools]}")

